/* This file was generated by SableCC (http://www.sablecc.org/). */

package mangaba.analysis;

import java.util.*;
import mangaba.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getInstanciaPrograma() != null)
        {
            node.getInstanciaPrograma().apply(this);
        }
        outAStart(node);
    }

    public void inAInstanciaPrograma(AInstanciaPrograma node)
    {
        defaultIn(node);
    }

    public void outAInstanciaPrograma(AInstanciaPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstanciaPrograma(AInstanciaPrograma node)
    {
        inAInstanciaPrograma(node);
        if(node.getBlocoFuncoes() != null)
        {
            node.getBlocoFuncoes().apply(this);
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getBlocoDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outAInstanciaPrograma(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outABlocoComando(node);
    }

    public void inABlocoPrograma(ABlocoPrograma node)
    {
        defaultIn(node);
    }

    public void outABlocoPrograma(ABlocoPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoPrograma(ABlocoPrograma node)
    {
        inABlocoPrograma(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getBlocoComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getBlocoDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outABlocoPrograma(node);
    }

    public void inAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        inAVariavelDeclaracao(node);
        if(node.getBlocoVariaveis() != null)
        {
            node.getBlocoVariaveis().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVariavelDeclaracao(node);
    }

    public void inAVetorDeclaracao(AVetorDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVetorDeclaracao(AVetorDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorDeclaracao(AVetorDeclaracao node)
    {
        inAVetorDeclaracao(node);
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVetorDeclaracao(node);
    }

    public void inAVariavelVariavel(AVariavelVariavel node)
    {
        defaultIn(node);
    }

    public void outAVariavelVariavel(AVariavelVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelVariavel(AVariavelVariavel node)
    {
        inAVariavelVariavel(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVariavelVariavel(node);
    }

    public void inAVetorVariavel(AVetorVariavel node)
    {
        defaultIn(node);
    }

    public void outAVetorVariavel(AVetorVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVariavel(AVetorVariavel node)
    {
        inAVetorVariavel(node);
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVetorVariavel(node);
    }

    public void inAVariavelBlocoVariaveis(AVariavelBlocoVariaveis node)
    {
        defaultIn(node);
    }

    public void outAVariavelBlocoVariaveis(AVariavelBlocoVariaveis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelBlocoVariaveis(AVariavelBlocoVariaveis node)
    {
        inAVariavelBlocoVariaveis(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVariavelBlocoVariaveis(node);
    }

    public void inAVariaveisBlocoVariaveis(AVariaveisBlocoVariaveis node)
    {
        defaultIn(node);
    }

    public void outAVariaveisBlocoVariaveis(AVariaveisBlocoVariaveis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariaveisBlocoVariaveis(AVariaveisBlocoVariaveis node)
    {
        inAVariaveisBlocoVariaveis(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        if(node.getBlocoVariaveis() != null)
        {
            node.getBlocoVariaveis().apply(this);
        }
        outAVariaveisBlocoVariaveis(node);
    }

    public void inAVariavelVariaveisFuncao(AVariavelVariaveisFuncao node)
    {
        defaultIn(node);
    }

    public void outAVariavelVariaveisFuncao(AVariavelVariaveisFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelVariaveisFuncao(AVariavelVariaveisFuncao node)
    {
        inAVariavelVariaveisFuncao(node);
        if(node.getVariavelFuncao() != null)
        {
            node.getVariavelFuncao().apply(this);
        }
        outAVariavelVariaveisFuncao(node);
    }

    public void inAVariaveisVariaveisFuncao(AVariaveisVariaveisFuncao node)
    {
        defaultIn(node);
    }

    public void outAVariaveisVariaveisFuncao(AVariaveisVariaveisFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariaveisVariaveisFuncao(AVariaveisVariaveisFuncao node)
    {
        inAVariaveisVariaveisFuncao(node);
        if(node.getVariavelFuncao() != null)
        {
            node.getVariavelFuncao().apply(this);
        }
        if(node.getVariaveisFuncao() != null)
        {
            node.getVariaveisFuncao().apply(this);
        }
        outAVariaveisVariaveisFuncao(node);
    }

    public void inAVariavelVariavelFuncao(AVariavelVariavelFuncao node)
    {
        defaultIn(node);
    }

    public void outAVariavelVariavelFuncao(AVariavelVariavelFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelVariavelFuncao(AVariavelVariavelFuncao node)
    {
        inAVariavelVariavelFuncao(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVariavelVariavelFuncao(node);
    }

    public void inAVariaveisVariavelFuncao(AVariaveisVariavelFuncao node)
    {
        defaultIn(node);
    }

    public void outAVariaveisVariavelFuncao(AVariaveisVariavelFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariaveisVariavelFuncao(AVariaveisVariavelFuncao node)
    {
        inAVariaveisVariavelFuncao(node);
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVariaveisVariavelFuncao(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getNReal() != null)
        {
            node.getNReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inACaractereTipo(ACaractereTipo node)
    {
        defaultIn(node);
    }

    public void outACaractereTipo(ACaractereTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipo(ACaractereTipo node)
    {
        inACaractereTipo(node);
        if(node.getNCaract() != null)
        {
            node.getNCaract().apply(this);
        }
        outACaractereTipo(node);
    }

    public void inABooleanoTipo(ABooleanoTipo node)
    {
        defaultIn(node);
    }

    public void outABooleanoTipo(ABooleanoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoTipo(ABooleanoTipo node)
    {
        inABooleanoTipo(node);
        if(node.getNBooleano() != null)
        {
            node.getNBooleano().apply(this);
        }
        outABooleanoTipo(node);
    }

    public void inAVazioTipoFuncao(AVazioTipoFuncao node)
    {
        defaultIn(node);
    }

    public void outAVazioTipoFuncao(AVazioTipoFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioTipoFuncao(AVazioTipoFuncao node)
    {
        inAVazioTipoFuncao(node);
        if(node.getVazio() != null)
        {
            node.getVazio().apply(this);
        }
        outAVazioTipoFuncao(node);
    }

    public void inATipoTipoFuncao(ATipoTipoFuncao node)
    {
        defaultIn(node);
    }

    public void outATipoTipoFuncao(ATipoTipoFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoTipoFuncao(ATipoTipoFuncao node)
    {
        inATipoTipoFuncao(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outATipoTipoFuncao(node);
    }

    public void inAAtribuicaoAtribuicoes(AAtribuicaoAtribuicoes node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoAtribuicoes(AAtribuicaoAtribuicoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoAtribuicoes(AAtribuicaoAtribuicoes node)
    {
        inAAtribuicaoAtribuicoes(node);
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAAtribuicaoAtribuicoes(node);
    }

    public void inAFuncaoAtribuicoes(AFuncaoAtribuicoes node)
    {
        defaultIn(node);
    }

    public void outAFuncaoAtribuicoes(AFuncaoAtribuicoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoAtribuicoes(AFuncaoAtribuicoes node)
    {
        inAFuncaoAtribuicoes(node);
        if(node.getFuncaoChamada() != null)
        {
            node.getFuncaoChamada().apply(this);
        }
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAFuncaoAtribuicoes(node);
    }

    public void inADeclaracaoFuncao(ADeclaracaoFuncao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoFuncao(ADeclaracaoFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoFuncao(ADeclaracaoFuncao node)
    {
        inADeclaracaoFuncao(node);
        if(node.getBlocoPrograma() != null)
        {
            node.getBlocoPrograma().apply(this);
        }
        if(node.getVariaveisFuncao() != null)
        {
            node.getVariaveisFuncao().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipoFuncao() != null)
        {
            node.getTipoFuncao().apply(this);
        }
        outADeclaracaoFuncao(node);
    }

    public void inARetorno(ARetorno node)
    {
        defaultIn(node);
    }

    public void outARetorno(ARetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetorno(ARetorno node)
    {
        inARetorno(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outARetorno(node);
    }

    public void inAFuncaoChamada(AFuncaoChamada node)
    {
        defaultIn(node);
    }

    public void outAFuncaoChamada(AFuncaoChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoChamada(AFuncaoChamada node)
    {
        inAFuncaoChamada(node);
        if(node.getBlocoExpr() != null)
        {
            node.getBlocoExpr().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAFuncaoChamada(node);
    }

    public void inAFuncaoBlocoFuncoes(AFuncaoBlocoFuncoes node)
    {
        defaultIn(node);
    }

    public void outAFuncaoBlocoFuncoes(AFuncaoBlocoFuncoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoBlocoFuncoes(AFuncaoBlocoFuncoes node)
    {
        inAFuncaoBlocoFuncoes(node);
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        outAFuncaoBlocoFuncoes(node);
    }

    public void inAVariasBlocoFuncoes(AVariasBlocoFuncoes node)
    {
        defaultIn(node);
    }

    public void outAVariasBlocoFuncoes(AVariasBlocoFuncoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariasBlocoFuncoes(AVariasBlocoFuncoes node)
    {
        inAVariasBlocoFuncoes(node);
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        if(node.getBlocoFuncoes() != null)
        {
            node.getBlocoFuncoes().apply(this);
        }
        outAVariasBlocoFuncoes(node);
    }

    public void inASeEstrutura(ASeEstrutura node)
    {
        defaultIn(node);
    }

    public void outASeEstrutura(ASeEstrutura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeEstrutura(ASeEstrutura node)
    {
        inASeEstrutura(node);
        if(node.getSeStant() != null)
        {
            node.getSeStant().apply(this);
        }
        outASeEstrutura(node);
    }

    public void inASenaoEstrutura(ASenaoEstrutura node)
    {
        defaultIn(node);
    }

    public void outASenaoEstrutura(ASenaoEstrutura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoEstrutura(ASenaoEstrutura node)
    {
        inASenaoEstrutura(node);
        if(node.getSenaoStant() != null)
        {
            node.getSenaoStant().apply(this);
        }
        if(node.getSeStant() != null)
        {
            node.getSeStant().apply(this);
        }
        outASenaoEstrutura(node);
    }

    public void inAEnquantoEstrutura(AEnquantoEstrutura node)
    {
        defaultIn(node);
    }

    public void outAEnquantoEstrutura(AEnquantoEstrutura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoEstrutura(AEnquantoEstrutura node)
    {
        inAEnquantoEstrutura(node);
        if(node.getEnquantoStant() != null)
        {
            node.getEnquantoStant().apply(this);
        }
        outAEnquantoEstrutura(node);
    }

    public void inAParaEstrutura(AParaEstrutura node)
    {
        defaultIn(node);
    }

    public void outAParaEstrutura(AParaEstrutura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaEstrutura(AParaEstrutura node)
    {
        inAParaEstrutura(node);
        if(node.getParaStant() != null)
        {
            node.getParaStant().apply(this);
        }
        outAParaEstrutura(node);
    }

    public void inAParacadaEstrutura(AParacadaEstrutura node)
    {
        defaultIn(node);
    }

    public void outAParacadaEstrutura(AParacadaEstrutura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParacadaEstrutura(AParacadaEstrutura node)
    {
        inAParacadaEstrutura(node);
        if(node.getParacadaStant() != null)
        {
            node.getParacadaStant().apply(this);
        }
        outAParacadaEstrutura(node);
    }

    public void inASeStant(ASeStant node)
    {
        defaultIn(node);
    }

    public void outASeStant(ASeStant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeStant(ASeStant node)
    {
        inASeStant(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getBlocoComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        outASeStant(node);
    }

    public void inASenaoStant(ASenaoStant node)
    {
        defaultIn(node);
    }

    public void outASenaoStant(ASenaoStant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoStant(ASenaoStant node)
    {
        inASenaoStant(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getBlocoComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outASenaoStant(node);
    }

    public void inAEnquantoStant(AEnquantoStant node)
    {
        defaultIn(node);
    }

    public void outAEnquantoStant(AEnquantoStant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoStant(AEnquantoStant node)
    {
        inAEnquantoStant(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getBlocoComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        outAEnquantoStant(node);
    }

    public void inAParaStant(AParaStant node)
    {
        defaultIn(node);
    }

    public void outAParaStant(AParaStant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaStant(AParaStant node)
    {
        inAParaStant(node);
        if(node.getParaStant2() != null)
        {
            node.getParaStant2().apply(this);
        }
        if(node.getAtribuicoes() != null)
        {
            node.getAtribuicoes().apply(this);
        }
        outAParaStant(node);
    }

    public void inAParaStant2(AParaStant2 node)
    {
        defaultIn(node);
    }

    public void outAParaStant2(AParaStant2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaStant2(AParaStant2 node)
    {
        inAParaStant2(node);
        if(node.getParaStant3() != null)
        {
            node.getParaStant3().apply(this);
        }
        outAParaStant2(node);
    }

    public void inAParaStant3(AParaStant3 node)
    {
        defaultIn(node);
    }

    public void outAParaStant3(AParaStant3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaStant3(AParaStant3 node)
    {
        inAParaStant3(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getBlocoComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAParaStant3(node);
    }

    public void inAParacadaStant(AParacadaStant node)
    {
        defaultIn(node);
    }

    public void outAParacadaStant(AParacadaStant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParacadaStant(AParacadaStant node)
    {
        inAParacadaStant(node);
        if(node.getParacadaStant2() != null)
        {
            node.getParacadaStant2().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAParacadaStant(node);
    }

    public void inAParacadaStant2(AParacadaStant2 node)
    {
        defaultIn(node);
    }

    public void outAParacadaStant2(AParacadaStant2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParacadaStant2(AParacadaStant2 node)
    {
        inAParacadaStant2(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getBlocoComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAParacadaStant2(node);
    }

    public void inAFuncaoComando(AFuncaoComando node)
    {
        defaultIn(node);
    }

    public void outAFuncaoComando(AFuncaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoComando(AFuncaoComando node)
    {
        inAFuncaoComando(node);
        if(node.getFuncaoChamada() != null)
        {
            node.getFuncaoChamada().apply(this);
        }
        outAFuncaoComando(node);
    }

    public void inARetorneComando(ARetorneComando node)
    {
        defaultIn(node);
    }

    public void outARetorneComando(ARetorneComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetorneComando(ARetorneComando node)
    {
        inARetorneComando(node);
        if(node.getRetorno() != null)
        {
            node.getRetorno().apply(this);
        }
        outARetorneComando(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getAtribuicoes() != null)
        {
            node.getAtribuicoes().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getSeEstrutura() != null)
        {
            node.getSeEstrutura().apply(this);
        }
        outASeComando(node);
    }

    public void inASeSenaoComando(ASeSenaoComando node)
    {
        defaultIn(node);
    }

    public void outASeSenaoComando(ASeSenaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSenaoComando(ASeSenaoComando node)
    {
        inASeSenaoComando(node);
        if(node.getSenaoEstrutura() != null)
        {
            node.getSenaoEstrutura().apply(this);
        }
        outASeSenaoComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getEnquantoEstrutura() != null)
        {
            node.getEnquantoEstrutura().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getParaEstrutura() != null)
        {
            node.getParaEstrutura().apply(this);
        }
        outAParaComando(node);
    }

    public void inAParaCadaComando(AParaCadaComando node)
    {
        defaultIn(node);
    }

    public void outAParaCadaComando(AParaCadaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaCadaComando(AParaCadaComando node)
    {
        inAParaCadaComando(node);
        if(node.getParacadaEstrutura() != null)
        {
            node.getParacadaEstrutura().apply(this);
        }
        outAParaCadaComando(node);
    }

    public void inASimplesBlocoExpr(ASimplesBlocoExpr node)
    {
        defaultIn(node);
    }

    public void outASimplesBlocoExpr(ASimplesBlocoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesBlocoExpr(ASimplesBlocoExpr node)
    {
        inASimplesBlocoExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASimplesBlocoExpr(node);
    }

    public void inABlocoExprBlocoExpr(ABlocoExprBlocoExpr node)
    {
        defaultIn(node);
    }

    public void outABlocoExprBlocoExpr(ABlocoExprBlocoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExprBlocoExpr(ABlocoExprBlocoExpr node)
    {
        inABlocoExprBlocoExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getBlocoExpr() != null)
        {
            node.getBlocoExpr().apply(this);
        }
        outABlocoExprBlocoExpr(node);
    }

    public void inAMaisExpr(AMaisExpr node)
    {
        defaultIn(node);
    }

    public void outAMaisExpr(AMaisExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisExpr(AMaisExpr node)
    {
        inAMaisExpr(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMaisExpr(node);
    }

    public void inAMenosExpr(AMenosExpr node)
    {
        defaultIn(node);
    }

    public void outAMenosExpr(AMenosExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpr(AMenosExpr node)
    {
        inAMenosExpr(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMenosExpr(node);
    }

    public void inAVezesExpr(AVezesExpr node)
    {
        defaultIn(node);
    }

    public void outAVezesExpr(AVezesExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVezesExpr(AVezesExpr node)
    {
        inAVezesExpr(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAVezesExpr(node);
    }

    public void inADivididoExpr(ADivididoExpr node)
    {
        defaultIn(node);
    }

    public void outADivididoExpr(ADivididoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivididoExpr(ADivididoExpr node)
    {
        inADivididoExpr(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outADivididoExpr(node);
    }

    public void inARestoExpr(ARestoExpr node)
    {
        defaultIn(node);
    }

    public void outARestoExpr(ARestoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARestoExpr(ARestoExpr node)
    {
        inARestoExpr(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outARestoExpr(node);
    }

    public void inAValorExpr(AValorExpr node)
    {
        defaultIn(node);
    }

    public void outAValorExpr(AValorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExpr(AValorExpr node)
    {
        inAValorExpr(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExpr(node);
    }

    public void inAVariavelExpr(AVariavelExpr node)
    {
        defaultIn(node);
    }

    public void outAVariavelExpr(AVariavelExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelExpr(AVariavelExpr node)
    {
        inAVariavelExpr(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVariavelExpr(node);
    }

    public void inAMenosExpressaoExpr(AMenosExpressaoExpr node)
    {
        defaultIn(node);
    }

    public void outAMenosExpressaoExpr(AMenosExpressaoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpressaoExpr(AMenosExpressaoExpr node)
    {
        inAMenosExpressaoExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosExpressaoExpr(node);
    }

    public void inAOuExprLogica(AOuExprLogica node)
    {
        defaultIn(node);
    }

    public void outAOuExprLogica(AOuExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExprLogica(AOuExprLogica node)
    {
        inAOuExprLogica(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAOuExprLogica(node);
    }

    public void inAEExprLogica(AEExprLogica node)
    {
        defaultIn(node);
    }

    public void outAEExprLogica(AEExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExprLogica(AEExprLogica node)
    {
        inAEExprLogica(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAEExprLogica(node);
    }

    public void inAMaiorigualExprLogica(AMaiorigualExprLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorigualExprLogica(AMaiorigualExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorigualExprLogica(AMaiorigualExprLogica node)
    {
        inAMaiorigualExprLogica(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMaiorigualExprLogica(node);
    }

    public void inAMenorigualExprLogica(AMenorigualExprLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorigualExprLogica(AMenorigualExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorigualExprLogica(AMenorigualExprLogica node)
    {
        inAMenorigualExprLogica(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMenorigualExprLogica(node);
    }

    public void inAMaiorExprLogica(AMaiorExprLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorExprLogica(AMaiorExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExprLogica(AMaiorExprLogica node)
    {
        inAMaiorExprLogica(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMaiorExprLogica(node);
    }

    public void inAMenorExprLogica(AMenorExprLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorExprLogica(AMenorExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExprLogica(AMenorExprLogica node)
    {
        inAMenorExprLogica(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMenorExprLogica(node);
    }

    public void inAMaisExprLogica(AMaisExprLogica node)
    {
        defaultIn(node);
    }

    public void outAMaisExprLogica(AMaisExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisExprLogica(AMaisExprLogica node)
    {
        inAMaisExprLogica(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMaisExprLogica(node);
    }

    public void inAMenosExprLogica(AMenosExprLogica node)
    {
        defaultIn(node);
    }

    public void outAMenosExprLogica(AMenosExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExprLogica(AMenosExprLogica node)
    {
        inAMenosExprLogica(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMenosExprLogica(node);
    }

    public void inAVezesExprLogica(AVezesExprLogica node)
    {
        defaultIn(node);
    }

    public void outAVezesExprLogica(AVezesExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVezesExprLogica(AVezesExprLogica node)
    {
        inAVezesExprLogica(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAVezesExprLogica(node);
    }

    public void inADivididoExprLogica(ADivididoExprLogica node)
    {
        defaultIn(node);
    }

    public void outADivididoExprLogica(ADivididoExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivididoExprLogica(ADivididoExprLogica node)
    {
        inADivididoExprLogica(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outADivididoExprLogica(node);
    }

    public void inARestoExprLogica(ARestoExprLogica node)
    {
        defaultIn(node);
    }

    public void outARestoExprLogica(ARestoExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARestoExprLogica(ARestoExprLogica node)
    {
        inARestoExprLogica(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outARestoExprLogica(node);
    }

    public void inANaoExprLogica(ANaoExprLogica node)
    {
        defaultIn(node);
    }

    public void outANaoExprLogica(ANaoExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExprLogica(ANaoExprLogica node)
    {
        inANaoExprLogica(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outANaoExprLogica(node);
    }

    public void inAValorExprLogica(AValorExprLogica node)
    {
        defaultIn(node);
    }

    public void outAValorExprLogica(AValorExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExprLogica(AValorExprLogica node)
    {
        inAValorExprLogica(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExprLogica(node);
    }

    public void inAVariavelExprLogica(AVariavelExprLogica node)
    {
        defaultIn(node);
    }

    public void outAVariavelExprLogica(AVariavelExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelExprLogica(AVariavelExprLogica node)
    {
        inAVariavelExprLogica(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVariavelExprLogica(node);
    }

    public void inAValorRealValor(AValorRealValor node)
    {
        defaultIn(node);
    }

    public void outAValorRealValor(AValorRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorRealValor(AValorRealValor node)
    {
        inAValorRealValor(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outAValorRealValor(node);
    }

    public void inAValorInteiroValor(AValorInteiroValor node)
    {
        defaultIn(node);
    }

    public void outAValorInteiroValor(AValorInteiroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorInteiroValor(AValorInteiroValor node)
    {
        inAValorInteiroValor(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAValorInteiroValor(node);
    }

    public void inAValorCaractereValor(AValorCaractereValor node)
    {
        defaultIn(node);
    }

    public void outAValorCaractereValor(AValorCaractereValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorCaractereValor(AValorCaractereValor node)
    {
        inAValorCaractereValor(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outAValorCaractereValor(node);
    }

    public void inAValorBooleanoValor(AValorBooleanoValor node)
    {
        defaultIn(node);
    }

    public void outAValorBooleanoValor(AValorBooleanoValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorBooleanoValor(AValorBooleanoValor node)
    {
        inAValorBooleanoValor(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outAValorBooleanoValor(node);
    }
}
