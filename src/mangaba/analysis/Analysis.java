/* This file was generated by SableCC (http://www.sablecc.org/). */

package mangaba.analysis;

import mangaba.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStart(AStart node);
    void caseAInstanciaPrograma(AInstanciaPrograma node);
    void caseABlocoComando(ABlocoComando node);
    void caseABlocoPrograma(ABlocoPrograma node);
    void caseAVariavelDeclaracao(AVariavelDeclaracao node);
    void caseAVetorDeclaracao(AVetorDeclaracao node);
    void caseAVariavelVariavel(AVariavelVariavel node);
    void caseAVetorVariavel(AVetorVariavel node);
    void caseAVariavelBlocoVariaveis(AVariavelBlocoVariaveis node);
    void caseAVariaveisBlocoVariaveis(AVariaveisBlocoVariaveis node);
    void caseAVariavelVariaveisFuncao(AVariavelVariaveisFuncao node);
    void caseAVariaveisVariaveisFuncao(AVariaveisVariaveisFuncao node);
    void caseAVariavelVariavelFuncao(AVariavelVariavelFuncao node);
    void caseAVariaveisVariavelFuncao(AVariaveisVariavelFuncao node);
    void caseARealTipo(ARealTipo node);
    void caseAInteiroTipo(AInteiroTipo node);
    void caseACaractereTipo(ACaractereTipo node);
    void caseABooleanoTipo(ABooleanoTipo node);
    void caseAVazioTipoFuncao(AVazioTipoFuncao node);
    void caseATipoTipoFuncao(ATipoTipoFuncao node);
    void caseAAtribuicaoAtribuicoes(AAtribuicaoAtribuicoes node);
    void caseAFuncaoAtribuicoes(AFuncaoAtribuicoes node);
    void caseADeclaracaoFuncao(ADeclaracaoFuncao node);
    void caseARetorno(ARetorno node);
    void caseAFuncaoChamada(AFuncaoChamada node);
    void caseAFuncaoBlocoFuncoes(AFuncaoBlocoFuncoes node);
    void caseAVariasBlocoFuncoes(AVariasBlocoFuncoes node);
    void caseASeEstrutura(ASeEstrutura node);
    void caseASenaoEstrutura(ASenaoEstrutura node);
    void caseAEnquantoEstrutura(AEnquantoEstrutura node);
    void caseAParaEstrutura(AParaEstrutura node);
    void caseAParacadaEstrutura(AParacadaEstrutura node);
    void caseASeStant(ASeStant node);
    void caseASenaoStant(ASenaoStant node);
    void caseAEnquantoStant(AEnquantoStant node);
    void caseAParaStant(AParaStant node);
    void caseAParaStant2(AParaStant2 node);
    void caseAParaStant3(AParaStant3 node);
    void caseAParacadaStant(AParacadaStant node);
    void caseAParacadaStant2(AParacadaStant2 node);
    void caseAFuncaoComando(AFuncaoComando node);
    void caseARetorneComando(ARetorneComando node);
    void caseAAtribuicaoComando(AAtribuicaoComando node);
    void caseASeComando(ASeComando node);
    void caseASeSenaoComando(ASeSenaoComando node);
    void caseAEnquantoComando(AEnquantoComando node);
    void caseAParaComando(AParaComando node);
    void caseAParaCadaComando(AParaCadaComando node);
    void caseASimplesBlocoExpr(ASimplesBlocoExpr node);
    void caseABlocoExprBlocoExpr(ABlocoExprBlocoExpr node);
    void caseAMaisExpr(AMaisExpr node);
    void caseAMenosExpr(AMenosExpr node);
    void caseAVezesExpr(AVezesExpr node);
    void caseADivididoExpr(ADivididoExpr node);
    void caseARestoExpr(ARestoExpr node);
    void caseAValorExpr(AValorExpr node);
    void caseAVariavelExpr(AVariavelExpr node);
    void caseAMenosExpressaoExpr(AMenosExpressaoExpr node);
    void caseAOuExprLogica(AOuExprLogica node);
    void caseAEExprLogica(AEExprLogica node);
    void caseAMaiorigualExprLogica(AMaiorigualExprLogica node);
    void caseAMenorigualExprLogica(AMenorigualExprLogica node);
    void caseAMaiorExprLogica(AMaiorExprLogica node);
    void caseAMenorExprLogica(AMenorExprLogica node);
    void caseAMaisExprLogica(AMaisExprLogica node);
    void caseAMenosExprLogica(AMenosExprLogica node);
    void caseAVezesExprLogica(AVezesExprLogica node);
    void caseADivididoExprLogica(ADivididoExprLogica node);
    void caseARestoExprLogica(ARestoExprLogica node);
    void caseANaoExprLogica(ANaoExprLogica node);
    void caseAValorExprLogica(AValorExprLogica node);
    void caseAVariavelExprLogica(AVariavelExprLogica node);
    void caseAValorRealValor(AValorRealValor node);
    void caseAValorInteiroValor(AValorInteiroValor node);
    void caseAValorCaractereValor(AValorCaractereValor node);
    void caseAValorBooleanoValor(AValorBooleanoValor node);

    void caseTComentario(TComentario node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseTApos(TApos node);
    void caseTInteiro(TInteiro node);
    void caseTReal(TReal node);
    void caseTCaractere(TCaractere node);
    void caseTBooleano(TBooleano node);
    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTNReal(TNReal node);
    void caseTNInteiro(TNInteiro node);
    void caseTNCaract(TNCaract node);
    void caseTNBooleano(TNBooleano node);
    void caseTVerdadeiro(TVerdadeiro node);
    void caseTFalso(TFalso node);
    void caseTVetor(TVetor node);
    void caseTVazio(TVazio node);
    void caseTExibir(TExibir node);
    void caseTRetorne(TRetorne node);
    void caseTEm(TEm node);
    void caseTEnquanto(TEnquanto node);
    void caseTSe(TSe node);
    void caseTSenao(TSenao node);
    void caseTPara(TPara node);
    void caseTParacada(TParacada node);
    void caseTOctal(TOctal node);
    void caseTHexaDecimal(THexaDecimal node);
    void caseTDecimal(TDecimal node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTNega(TNega node);
    void caseTIdentificador(TIdentificador node);
    void caseTBlank(TBlank node);
    void caseTMais(TMais node);
    void caseTMenos(TMenos node);
    void caseTMultiplica(TMultiplica node);
    void caseTDivisor(TDivisor node);
    void caseTMod(TMod node);
    void caseTMenorq(TMenorq node);
    void caseTMaiorq(TMaiorq node);
    void caseTIgual(TIgual node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTEsquerdoParenteses(TEsquerdoParenteses node);
    void caseTDireitoParenteses(TDireitoParenteses node);
    void caseTAtribui(TAtribui node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTColcheteEsquerdo(TColcheteEsquerdo node);
    void caseTColcheteDireito(TColcheteDireito node);
    void caseTChaveEsquerdo(TChaveEsquerdo node);
    void caseTChaveDireito(TChaveDireito node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTAspas(TAspas node);
    void caseTSeparator(TSeparator node);
    void caseTVirgula(TVirgula node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
